name: "ADD_LIQUIDITY_TO_UNISWAP_USING_ROUTER"

variables:
  uniswapRouterAddress: address
  tokenAAddress: address
  tokenBAddress: address
  amountADesired: uint256
  amountBDesired: uint256
  amountAMin: uint256
  amountBMin: uint256
  deadline: uint256               # maybe we can default this one

results:
  tokenABalance: uint256
  tokenBBalance: uint256
  liquidityTokenAmount: uint256

definitions:
 - Token TOKEN_A tokenAAddress
 - Token TOKEN_B tokenBAddress
 - Token LIQUIDITY_TOKEN liquidityTokenAddress
 - Function approveA TOKEN_A approve(address, uint256) => uint256
 - Function approveB TOKEN_B approve(address, uint256) => uint256
 - Function balanceOfA TOKEN_A approve(address, uint256) => uint256
 - Function balanceOfB TOKEN_B balanceOf(address) => uint256
 - Function balanceOfLiquidityToken LIQUIDITY_TOKEN balanceOf(address) => uint256
 - Contract UNISWAP_ROUTER uniswapRouterAddress
 - Function addLiquidity UNISWAP_ROUTER addLiquidity(address, address, uint256, uint256, uint256, uint256, address, uint256) => (uint256, uint256, uint256)

inputs:

actions:
 - TOKEN_A balanceOfA wallet => initialAmountA
 - TOKEN_B balanceOfB wallet => initialAmountB
 - LIQUIDITY_TOKEN  balanceOfLiquidityToken wallet => initialLiquidityAmount
 - TOKEN_A approveA UNISWAP_ROUTER amountADesired
 - TOKEN_B approveB UNISWAP_ROUTER amountBDesired
 - UNISWAP_ROUTER addLiquidity tokenAAddress tokenBAddress amountADesired amountBDesired amountAMin amountBMin wallet deadline
 - TOKEN_A balanceOfA wallet => finalAmountA
 - TOKEN_B balanceOfB wallet => finalAmountB
 - LIQUIDITY_TOKEN  balanceOfLiquidityToken wallet => finalLiquidityAmount

operations:
  - finalAmountA - initialAmountA => suppliedAmountA
  - finalAmountB - initialAmountB => suppliedAmountB
  - finalLiquidityAmount - initialLiquidityAmount => receivedLiquidityAmount

outputs:
 - TOKEN_A: suppliedAmountA
 - TOKEN_B: suppliedAmountB
 - LIQUIDITY_TOKEN: receivedLiquidityAmount

description: "Mint ${receivedLiquidityAmount:LIQUIDITY_TOKEN.decimals} ${LIQUIDITY_TOKEN.symbol by supplying ${suppliedAmountA:TOKEN_A.decimals} ${TOKEN_A.symbol} and ${suppliedAmountB:TOKEN_B.decimals} ${TOKEN_B.symbol}."
